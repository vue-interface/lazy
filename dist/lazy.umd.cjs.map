{"version":3,"file":"lazy.umd.cjs","sources":["../src/Lazy.ts"],"sourcesContent":["import { DirectiveBinding, VNode } from \"vue\";\n\nfunction lazy(el: HTMLElement, binding: DirectiveBinding) {\n    // If the image already has a source and source is same as lazy loader,\n    // then kill it.\n    if( el.getAttribute('src') && \n        el.getAttribute('src') === el.getAttribute('data-src')) {\n        return;\n    }\n\n    let dataSrc = el.getAttribute('data-src');\n\n    // If the data source is a binary URL, just put that into src directly.\n    if(dataSrc?.match(/data\\:/)) {\n        el.setAttribute('src', dataSrc);\n        el.removeAttribute('data-src');\n    }\n    else if(dataSrc) {\n        el.dispatchEvent(new Event('loading'));\n        \n        // Create an image node\n        const img = document.createElement('img');\n\n        // Set the source\n        img.setAttribute('src', dataSrc);\n\n        // Wait for it to load and set the source.\n        img.addEventListener('load', e => {\n            el.setAttribute('src', img.src);\n\n            // If the binding value is a function, treat it like a callback.\n            if(binding.value instanceof Function) {\n                binding.value(img);\n            }\n\n            if(el.tagName !== 'IMG') {\n                el.dispatchEvent(new Event(e.type, e));\n            }\n        });\n\n        if(el.tagName !== 'IMG') {\n            img.addEventListener('error', e => {\n                el.dispatchEvent(new Event(e.type, e));\n            });\n        }\n    }\n}\n\nexport default {\n    beforeMount(el: HTMLElement, binding: DirectiveBinding, vnode: VNode) {\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach(({ isIntersecting }) => {\n                if(isIntersecting) {\n                    lazy(el, binding);\n                \n                    observer.disconnect();\n                }\n            });\n        });\n\n        observer.observe(el);\n    }\n};"],"names":["lazy","el","binding","dataSrc","img","e","Lazy","vnode","observer","entries","isIntersecting"],"mappings":"4NAEA,SAASA,EAAKC,EAAiBC,EAA2B,CAGlD,GAAAD,EAAG,aAAa,KAAK,GACrBA,EAAG,aAAa,KAAK,IAAMA,EAAG,aAAa,UAAU,EACrD,OAGA,IAAAE,EAAUF,EAAG,aAAa,UAAU,EAGrC,GAAAE,GAAA,MAAAA,EAAS,MAAM,UACXF,EAAA,aAAa,MAAOE,CAAO,EAC9BF,EAAG,gBAAgB,UAAU,UAEzBE,EAAS,CACbF,EAAG,cAAc,IAAI,MAAM,SAAS,CAAC,EAG/B,MAAAG,EAAM,SAAS,cAAc,KAAK,EAGpCA,EAAA,aAAa,MAAOD,CAAO,EAG3BC,EAAA,iBAAiB,OAAaC,GAAA,CAC3BJ,EAAA,aAAa,MAAOG,EAAI,GAAG,EAG3BF,EAAQ,iBAAiB,UACxBA,EAAQ,MAAME,CAAG,EAGlBH,EAAG,UAAY,OACdA,EAAG,cAAc,IAAI,MAAMI,EAAE,KAAMA,CAAC,CAAC,CACzC,CACH,EAEEJ,EAAG,UAAY,OACVG,EAAA,iBAAiB,QAAcC,GAAA,CAC/BJ,EAAG,cAAc,IAAI,MAAMI,EAAE,KAAMA,CAAC,CAAC,CAAA,CACxC,CAET,CACJ,CAEe,MAAAC,EAAA,CACX,YAAYL,EAAiBC,EAA2BK,EAAc,CAClE,MAAMC,EAAW,IAAI,qBAAsBC,GAAY,CACnDA,EAAQ,QAAQ,CAAC,CAAE,eAAAC,KAAqB,CACjCA,IACCV,EAAKC,EAAIC,CAAO,EAEhBM,EAAS,WAAW,EACxB,CACH,CAAA,CACJ,EAEDA,EAAS,QAAQP,CAAE,CACvB,CACJ"}
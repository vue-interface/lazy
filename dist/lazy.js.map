{"version":3,"file":"lazy.js","sources":["../src/Lazy.ts"],"sourcesContent":["import { DirectiveBinding, VNode } from \"vue\";\n\nfunction lazy(el: HTMLElement, binding: DirectiveBinding) {\n    // If the image already has a source and source is same as lazy loader,\n    // then kill it.\n    if( el.getAttribute('src') && \n        el.getAttribute('src') === el.getAttribute('data-src')) {\n        return;\n    }\n\n    let dataSrc = el.getAttribute('data-src');\n\n    // If the data source is a binary URL, just put that into src directly.\n    if(dataSrc?.match(/data\\:/)) {\n        el.setAttribute('src', dataSrc);\n        el.removeAttribute('data-src');\n    }\n    else if(dataSrc) {\n        el.dispatchEvent(new Event('loading'));\n        \n        // Create an image node\n        const img = document.createElement('img');\n\n        // Set the source\n        img.setAttribute('src', dataSrc);\n\n        // Wait for it to load and set the source.\n        img.addEventListener('load', e => {\n            el.setAttribute('src', img.src);\n\n            // If the binding value is a function, treat it like a callback.\n            if(binding.value instanceof Function) {\n                binding.value(img);\n            }\n\n            if(el.tagName !== 'IMG') {\n                el.dispatchEvent(new Event(e.type, e));\n            }\n        });\n\n        if(el.tagName !== 'IMG') {\n            img.addEventListener('error', e => {\n                el.dispatchEvent(new Event(e.type, e));\n            });\n        }\n    }\n}\n\nexport default {\n    beforeMount(el: HTMLElement, binding: DirectiveBinding, vnode: VNode) {\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach(({ isIntersecting }) => {\n                if(isIntersecting) {\n                    lazy(el, binding);\n                \n                    observer.disconnect();\n                }\n            });\n        });\n\n        observer.observe(el);\n    }\n};"],"names":["lazy","el","binding","dataSrc","img","e","Lazy","vnode","observer","entries","isIntersecting"],"mappings":"AAEA,SAASA,EAAKC,GAAiBC,GAA2B;AAGlD,MAAAD,EAAG,aAAa,KAAK,KACrBA,EAAG,aAAa,KAAK,MAAMA,EAAG,aAAa,UAAU;AACrD;AAGA,MAAAE,IAAUF,EAAG,aAAa,UAAU;AAGrC,MAAAE,KAAA,QAAAA,EAAS,MAAM;AACX,IAAAF,EAAA,aAAa,OAAOE,CAAO,GAC9BF,EAAG,gBAAgB,UAAU;AAAA,WAEzBE,GAAS;AACb,IAAAF,EAAG,cAAc,IAAI,MAAM,SAAS,CAAC;AAG/B,UAAAG,IAAM,SAAS,cAAc,KAAK;AAGpC,IAAAA,EAAA,aAAa,OAAOD,CAAO,GAG3BC,EAAA,iBAAiB,QAAQ,CAAKC,MAAA;AAC3B,MAAAJ,EAAA,aAAa,OAAOG,EAAI,GAAG,GAG3BF,EAAQ,iBAAiB,YACxBA,EAAQ,MAAME,CAAG,GAGlBH,EAAG,YAAY,SACdA,EAAG,cAAc,IAAI,MAAMI,EAAE,MAAMA,CAAC,CAAC;AAAA,IACzC,CACH,GAEEJ,EAAG,YAAY,SACVG,EAAA,iBAAiB,SAAS,CAAKC,MAAA;AAC/B,MAAAJ,EAAG,cAAc,IAAI,MAAMI,EAAE,MAAMA,CAAC,CAAC;AAAA,IAAA,CACxC;AAAA,EAET;AACJ;AAEA,MAAeC,IAAA;AAAA,EACX,YAAYL,GAAiBC,GAA2BK,GAAc;AAClE,UAAMC,IAAW,IAAI,qBAAqB,CAACC,MAAY;AACnD,MAAAA,EAAQ,QAAQ,CAAC,EAAE,gBAAAC,QAAqB;AACpC,QAAGA,MACCV,EAAKC,GAAIC,CAAO,GAEhBM,EAAS,WAAW;AAAA,MACxB,CACH;AAAA,IAAA,CACJ;AAED,IAAAA,EAAS,QAAQP,CAAE;AAAA,EACvB;AACJ;"}